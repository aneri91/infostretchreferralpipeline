package com.infostretch.referral.services;

import java.util.Hashtable;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.infostretch.referral.commons.DataDTO;
import com.infostretch.referral.commons.LoginResponseDTO;
import com.infostretch.referral.commons.Status;
import com.infostretch.referral.dao.UserDao;
import com.infostretch.referral.entity.User;
import com.infostretch.referral.exception.RESTServiceException;

@Service
public class LoginService {
	
	@Autowired
	private UserDao userDao;
	
	public LoginResponseDTO validateLDAPUser(String userName,String password) throws RESTServiceException{
	    LdapContext ctx = null;
	    LoginResponseDTO respone=new LoginResponseDTO();
	    if(userName==null || password == null){
	    	
	    }
	    // LDAP validation, this will throw exception if not validated
	    try {
	        Hashtable<String, String> env = new Hashtable<String, String>();
	        env.put(Context.INITIAL_CONTEXT_FACTORY,
	                "com.sun.jndi.ldap.LdapCtxFactory");
	        env.put(Context.SECURITY_AUTHENTICATION, "simple");
	        env.put(Context.SECURITY_PRINCIPAL, userName);
	        env.put(Context.SECURITY_CREDENTIALS, password);
	        env.put(Context.PROVIDER_URL, "ldap://vpn.infostretch.com:389");
	        ctx = new InitialLdapContext(env, null);
	        SearchControls constraints = new SearchControls();
	        constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
	        String[] attrIDs = { "sn", "givenname", "department" };
	        constraints.setReturningAttributes(attrIDs);
	        NamingEnumeration<SearchResult> answer = ctx.search(
	                "DC=infostretch,DC=com",
	                "sAMAccountName="
	                        + userName.substring(0,
	                                userName.indexOf("@infostretch.com")),
	                constraints);
	        if (answer.hasMore()) {
	            Attributes attrs = answer.next().getAttributes();
	            String firstName = attrs.get("givenname") != null ? attrs.get(
	                    "givenname").get().toString() : "";
	            String lastName = attrs.get("sn") != null ? attrs.get("sn").get().toString() : "";
	            String department = attrs.get("department") != null ? attrs
	                    .get("department").get().toString() : "";
	            System.out.println("FirstName: " + firstName);
	            System.out.println("LastName: " + lastName);
	            System.out.println("Department: " + department);
	            
	            Integer userId=userDao.getUserIdByusername(userName);
	            if(userId == 0){
	            	User userEnity=new User();
	            	userEnity.setName(userName);
	            	userEnity.setEmail(userName);
	            	userEnity.setPassword(password);
	            	userEnity.setFirstname(firstName);
	            	userEnity.setLastname(lastName);
	            	userDao.save(userEnity);
	            	userId=userEnity.getId();
	            }
	            System.out.println("userId : "+userId);
	            respone.setStatus(new Status("success"));
	            respone.setData(new DataDTO(userName,department,userId));
//	            return true;
	        }
	    } catch (AuthenticationException e) {
	        System.out.println("Authentication Exception");
	        respone.setStatus(new Status("Unauthorized",401));
	        e.printStackTrace();
	    } catch (NamingException e) {
	        System.out.println("NamingException Exception");
	        respone.setStatus(new Status("Unauthorized",401));
	    }
	    return respone;
	}
	
	
}
