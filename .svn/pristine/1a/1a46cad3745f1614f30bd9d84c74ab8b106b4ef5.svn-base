package com.infostretch.referral.services;

import java.util.Hashtable;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.infostretch.referral.commons.DataDTO;
import com.infostretch.referral.commons.LoginResponseDTO;
import com.infostretch.referral.commons.Status;
import com.infostretch.referral.dao.UserDao;
import com.infostretch.referral.entity.User;
import com.infostretch.referral.exception.RESTServiceException;

/**
 * The Class LoginService.
 *
 *
 *
 *
 *
 * Login Authentication with LDAP<br/>
 *
 *
 *
 *
 *
 *
 *
 * @author aneri.parikh
 */
@Service
public class LoginService {
  /** The user dao. */
  @Autowired
  private UserDao userDao;

  /**
   * Instantiates a new login service.
   *
   * @author aneri.parikh
   */
  public LoginService() {
  }

  /**
   * Validate ldap user.
   *
   * @param userName
   *          the user name
   * @param password
   *          the password
   * @return the login response dto
   * @throws RESTServiceException
   *           the REST service exception
   */
  public LoginResponseDTO validateLDAPUser(final String userName, final String password)
      throws RESTServiceException {
    LdapContext ctx = null;
    final LoginResponseDTO respone = new LoginResponseDTO();

    // LDAP validation, this will throw exception if not validated
    try {
      final Hashtable<String, String> env = new Hashtable<String, String>();
      env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
      env.put(Context.SECURITY_AUTHENTICATION, "simple");
      env.put(Context.SECURITY_PRINCIPAL, userName);
      env.put(Context.SECURITY_CREDENTIALS, password);
      env.put(Context.PROVIDER_URL, "ldap://vpn.infostretch.com:389");
      ctx = new InitialLdapContext(env, null);
      final SearchControls constraints = new SearchControls();
      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
      final String[] attrIDs = { "sn", "givenname", "department" };
      constraints.setReturningAttributes(attrIDs);
      final NamingEnumeration<SearchResult> answer = ctx.search("DC=infostretch,DC=com",
          "sAMAccountName=" + userName.substring(0, userName.indexOf("@infostretch.com")),
          constraints);
      if (answer.hasMore()) {
        final Attributes attrs = answer.next().getAttributes();
        final String firstName = attrs.get("givenname") != null ? attrs.get("givenname").get()
            .toString() : "";
        final String lastName = attrs.get("sn") != null ? attrs.get("sn").get().toString() : "";
        final String department = attrs.get("department") != null ? attrs.get("department").get()
            .toString() : "";

        Integer userId = this.userDao.getUserIdByusername(userName);
        if (userId == 0) {
          final User userEnity = new User();
          userEnity.setName(userName);
          userEnity.setEmail(userName);
          userEnity.setPassword(password);
          userEnity.setFirstname(firstName);
          userEnity.setLastname(lastName);
          this.userDao.save(userEnity);
          userId = userEnity.getId();
        }
        respone.setStatus(new Status("success"));
        respone.setData(new DataDTO(userName, department, userId));
      }
    } catch (final AuthenticationException e) {
      respone.setStatus(new Status("Unauthorized", 401));
    } catch (final NamingException e) {
      respone.setStatus(new Status("Unauthorized", 401));
    }
    return respone;
  }

}
