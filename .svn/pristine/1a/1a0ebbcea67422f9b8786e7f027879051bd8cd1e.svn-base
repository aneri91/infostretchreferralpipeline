package com.infostretch.referral.utilities;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public final class ObjectUtils {

  /**
   * Clones Mutuable object for security reasons.
   *
   * @param <T>
   *          the generic type
   * @param obj
   *          represents Date
   * @return the t
   */
  @SuppressWarnings("unchecked")
  public static <T extends Cloneable> T clone(final T obj) {
    if (LOG.isInfoEnabled()) {
      LOG.info("clone(" + obj + ") called!");
    }
    if (obj != null) {
      if (obj.getClass().isArray()) {
        final Object result;
        final Class<?> componentType = obj.getClass().getComponentType();
        if (!componentType.isPrimitive()) {
          result = ((Object[]) obj).clone();
        } else {
          int length = Array.getLength(obj);
          result = Array.newInstance(componentType, length);
          while (length-- > 0) {
            Array.set(result, length, Array.get(obj, length));
          }
        }
        final T checked = (T) result;
        return checked;
      } else {
        try {
          return (T) obj.getClass().getMethod("clone").invoke(obj);
        } catch (final IllegalAccessException | IllegalArgumentException
            | InvocationTargetException | NoSuchMethodException | SecurityException e) {
          LOG.error("Clone not supported!", e);
          return null;
        }
      }

    }
    return null;
  }

  /**
   * The method that read inputstream and return image content in byte array.
   *
   * @param filecontent
   *          the filecontent
   * @return the bytes array
   * @throws IOException
   *           Signals that an I/O exception has occurred.
   */
  public static byte[] getBytesArray(final InputStream filecontent) throws IOException {
    final ByteArrayOutputStream os = new ByteArrayOutputStream();
    try {

      int read = 0;
      final byte[] bytes = new byte[1024];

      while ((read = filecontent.read(bytes)) != -1) {
        os.write(bytes, 0, read);
      }
    } catch (final IOException fne) {
      LOG.error("Error in reading inputStream", fne);
      throw fne;
    }
    return os.toByteArray();
  }

  /** The log. */
  private static final Log LOG = LogFactory.getLog(ObjectUtils.class);

  private ObjectUtils() {

  }
}
